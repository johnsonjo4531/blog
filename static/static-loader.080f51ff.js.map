{"version":3,"sources":["static-lib/unpkg.com/lit-html@1.1.2/lib/directive.js","static-lib/unpkg.com/lit-html@1.1.2/lib/dom.js","static-lib/unpkg.com/lit-html@1.1.2/lib/part.js","static-lib/unpkg.com/lit-html@1.1.2/lib/template.js","static-lib/unpkg.com/lit-html@1.1.2/lib/template-instance.js","static-lib/unpkg.com/lit-html@1.1.2/lib/template-result.js","static-lib/unpkg.com/lit-html@1.1.2/lib/parts.js","static-lib/unpkg.com/lit-html@1.1.2/lib/default-template-processor.js","static-lib/unpkg.com/lit-html@1.1.2/lib/template-factory.js","static-lib/unpkg.com/lit-html@1.1.2/lib/render.js","static-lib/unpkg.com/lit-html@1.1.2/lit-html.js","static-lib/lit-html.js","static-loader.js"],"names":["directives","WeakMap","directive","f","d","set","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","reparentNodes","container","start","end","before","n","nextSibling","insertBefore","removeNodes","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","result","element","parts","partIndex","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","strings","length","values","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","TemplateInstance","template","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","TemplateResult","commentMarker","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","SVGTemplateResult","svgElement","firstChild","isPrimitive","value","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","v","t","setAttribute","_getValue","committer","NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","call","DefaultTemplateProcessor","prefix","defaultTemplateProcessor","templateCache","templateCaches","get","stringsArray","keyString","Map","key","join","getTemplateElement","render","Object","assign","appendInto","svg","_log","console","log","bind","Log","params","timestamp","types","Console","logItems","map","display","getElementById","consoleOut","Date","toISOString"],"mappings":"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","file":"static-loader.080f51ff.js","sourceRoot":"../src-static","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n                                   * Brands a function as a directive factory function so that lit-html will call\n                                   * the function during template rendering, rather than passing as a value.\n                                   *\n                                   * A _directive_ is a function that takes a Part as an argument. It has the\n                                   * signature: `(part: Part) => void`.\n                                   *\n                                   * A directive _factory_ is a function that takes arguments for data and\n                                   * configuration and returns a directive. Users of directive usually refer to\n                                   * the directive factory as the directive. For example, \"The repeat directive\".\n                                   *\n                                   * Usually a template author will invoke a directive factory in their template\n                                   * with relevant arguments, which will then return a directive function.\n                                   *\n                                   * Here's an example of using the `repeat()` directive factory that takes an\n                                   * array and a function to render an item:\n                                   *\n                                   * ```js\n                                   * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n                                   * ```\n                                   *\n                                   * When `repeat` is invoked, it returns a directive function that closes over\n                                   * `items` and the template function. When the outer template is rendered, the\n                                   * return directive function is called with the Part for the expression.\n                                   * `repeat` then performs it's custom logic to render multiple items.\n                                   *\n                                   * @param f The directive factory function. Must be a function that returns a\n                                   * function of the signature `(part: Part) => void`. The returned function will\n                                   * be called with the part object.\n                                   *\n                                   * @example\n                                   *\n                                   * import {directive, html} from 'lit-html';\n                                   *\n                                   * const immutable = directive((v) => (part) => {\n                                   *   if (part.value !== v) {\n                                   *     part.setValue(v)\n                                   *   }\n                                   * });\n                                   */\nexport const directive = f => (...args) => {\n  const d = f(...args);\n  directives.set(d, true);\n  return d;\n};\nexport const isDirective = o => {\n  return typeof o === 'function' && directives.has(o);\n};","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n     * True if the custom elements polyfill is in use.\n     */\nexport const isCEPolyfill = window.customElements !== undefined &&\nwindow.customElements.polyfillWrapFlushCallback !==\nundefined;\n/**\n            * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n            * into another container (could be the same container), before `before`. If\n            * `before` is null, it appends the nodes to the container.\n            */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n  while (start !== end) {\n    const n = start.nextSibling;\n    container.insertBefore(start, before);\n    start = n;\n  }\n};\n/**\n    * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n    * `container`.\n    */\nexport const removeNodes = (container, start, end = null) => {\n  while (start !== end) {\n    const n = start.nextSibling;\n    container.removeChild(start);\n    start = n;\n  }\n};","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n     * A sentinel value that signals that a value was handled by a directive and\n     * should not be written to the DOM.\n     */\nexport const noChange = {};\n/**\n                             * A sentinel value that signals a NodePart to fully clear its content.\n                             */\nexport const nothing = {};","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n     * An expression marker with embedded unique key to avoid collision with\n     * possible text in templates.\n     */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n                                                                    * An expression marker used text-positions, multi-binding attributes, and\n                                                                    * attributes with markup-like text values.\n                                                                    */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n                                                                   * Suffix appended to all bound attribute names.\n                                                                   */\nexport const boundAttributeSuffix = '$lit$';\n/**\n                                              * An updateable Template that tracks the location of dynamic parts.\n                                              */\nexport class Template {\n  constructor(result, element) {\n    this.parts = [];\n    this.element = element;\n    const nodesToRemove = [];\n    const stack = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const { strings, values: { length } } = result;\n    while (partIndex < length) {\n      const node = walker.nextNode();\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop();\n        continue;\n      }\n      index++;\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n          if (node.hasAttributes()) {\n            const attributes = node.attributes;\n            const { length } = attributes;\n            // Per\n            // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n            // attributes are not guaranteed to be returned in document order.\n            // In particular, Edge/IE can return them out of order, so we cannot\n            // assume a correspondence between part index and attribute index.\n            let count = 0;\n            for (let i = 0; i < length; i++) {\n              if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                count++;\n              }\n            }\n            while (count-- > 0) {\n              // Get the template literal section leading up to the first\n              // expression in this attribute\n              const stringForPart = strings[partIndex];\n              // Find the attribute name\n              const name = lastAttributeNameRegex.exec(stringForPart)[2];\n              // Find the corresponding attribute\n              // All bound attributes have had a suffix added in\n              // TemplateResult#getHTML to opt out of special attribute\n              // handling. To look up the attribute value we also need to add\n              // the suffix.\n              const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n              const attributeValue = node.getAttribute(attributeLookupName);\n              node.removeAttribute(attributeLookupName);\n              const statics = attributeValue.split(markerRegex);\n              this.parts.push({ type: 'attribute', index, name, strings: statics });\n              partIndex += statics.length - 1;\n            }\n          }\n          if (node.tagName === 'TEMPLATE') {\n            stack.push(node);\n            walker.currentNode = node.content;\n          }\n        } else\n      if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n          const data = node.data;\n          if (data.indexOf(marker) >= 0) {\n            const parent = node.parentNode;\n            const strings = data.split(markerRegex);\n            const lastIndex = strings.length - 1;\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            for (let i = 0; i < lastIndex; i++) {\n              let insert;\n              let s = strings[i];\n              if (s === '') {\n                insert = createMarker();\n              } else\n              {\n                const match = lastAttributeNameRegex.exec(s);\n                if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                  s = s.slice(0, match.index) + match[1] +\n                  match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                }\n                insert = document.createTextNode(s);\n              }\n              parent.insertBefore(insert, node);\n              this.parts.push({ type: 'node', index: ++index });\n            }\n            // If there's no text, we must insert a comment to mark our place.\n            // Else, we can trust it will stick around after cloning.\n            if (strings[lastIndex] === '') {\n              parent.insertBefore(createMarker(), node);\n              nodesToRemove.push(node);\n            } else\n            {\n              node.data = strings[lastIndex];\n            }\n            // We have a part for each match found\n            partIndex += lastIndex;\n          }\n        } else\n      if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n          if (node.data === marker) {\n            const parent = node.parentNode;\n            // Add a new marker node to be the startNode of the Part if any of\n            // the following are true:\n            //  * We don't have a previousSibling\n            //  * The previousSibling is already the start of a previous part\n            if (node.previousSibling === null || index === lastPartIndex) {\n              index++;\n              parent.insertBefore(createMarker(), node);\n            }\n            lastPartIndex = index;\n            this.parts.push({ type: 'node', index });\n            // If we don't have a nextSibling, keep this node so we have an end.\n            // Else, we can remove it to save future costs.\n            if (node.nextSibling === null) {\n              node.data = '';\n            } else\n            {\n              nodesToRemove.push(node);\n              index--;\n            }\n            partIndex++;\n          } else\n          {\n            let i = -1;\n            while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n              // Comment node has a binding marker inside, make an inactive part\n              // The binding won't work, but subsequent bindings will\n              // TODO (justinfagnani): consider whether it's even worth it to\n              // make bindings in comments work\n              this.parts.push({ type: 'node', index: -1 });\n              partIndex++;\n            }\n          }\n        }\n    }\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode.removeChild(n);\n    }\n  }}\n\nconst endsWith = (str, suffix) => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = part => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n                                                               * This regex extracts the attribute name preceding an attribute-position\n                                                               * expression. It does this by matching the syntax allowed for attributes\n                                                               * against the string literal directly preceding the expression, assuming that\n                                                               * the expression is in an attribute-value position.\n                                                               *\n                                                               * See attributes in the HTML spec:\n                                                               * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n                                                               *\n                                                               * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n                                                               * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n                                                               *\n                                                               * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n                                                               * space character except \" \".\n                                                               *\n                                                               * So an attribute is:\n                                                               *  * The name: any character except a control character, space character, ('),\n                                                               *    (\"), \">\", \"=\", or \"/\"\n                                                               *  * Followed by zero or more space characters\n                                                               *  * Followed by \"=\"\n                                                               *  * Followed by zero or more space characters\n                                                               *  * Followed by:\n                                                               *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n                                                               *    * (\") then any non-(\"), or\n                                                               *    * (') then any non-(')\n                                                               */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n     * @module lit-html\n     */\nimport { isCEPolyfill } from \"./dom.js\";\nimport { isTemplatePartActive } from \"./template.js\";\n/**\n                                                              * An instance of a `Template` that can be attached to the DOM and updated\n                                                              * with new values.\n                                                              */\nexport class TemplateInstance {\n  constructor(template, processor, options) {\n    this.__parts = [];\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n  update(values) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n  _clone() {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n    const fragment = isCEPolyfill ?\n    this.template.element.content.cloneNode(true) :\n    document.importNode(this.template.element.content, true);\n    const stack = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node.nodeName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = node.content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop();\n          node = walker.nextNode();\n        }\n      }\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node.previousSibling);\n        this.__parts.push(part);\n      } else\n      {\n        this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }}","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n     * @module lit-html\n     */\nimport { reparentNodes } from \"./dom.js\";\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from \"./template.js\";\nconst commentMarker = ` ${marker} `;\n/**\n                                      * The return type of `html`, which holds a Template and the values from\n                                      * interpolated expressions.\n                                      */\nexport class TemplateResult {\n  constructor(strings, values, type, processor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n  /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n  getHTML() {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment poisition.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n      s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceeding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceeding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else\n      {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n        attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n        marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n  getTemplateElement() {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }}\n\n/**\n      * A TemplateResult for SVG fragments.\n      *\n      * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n      * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n      * clones only container the original fragment.\n      */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML() {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n  getTemplateElement() {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }}","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n     * @module lit-html\n     */\nimport { isDirective } from \"./directive.js\";\nimport { removeNodes } from \"./dom.js\";\nimport { noChange, nothing } from \"./part.js\";\nimport { TemplateInstance } from \"./template-instance.js\";\nimport { TemplateResult } from \"./template-result.js\";\nimport { createMarker } from \"./template.js\";\nexport const isPrimitive = value => {\n  return value === null ||\n  !(typeof value === 'object' || typeof value === 'function');\n};\nexport const isIterable = value => {\n  return Array.isArray(value) ||\n  // tslint:disable-next-line:no-any\n  !!(value && value[Symbol.iterator]);\n};\n/**\n    * Writes attribute values to the DOM for a group of AttributeParts bound to a\n    * single attibute. The value is only set once even if there are multiple parts\n    * for an attribute.\n    */\nexport class AttributeCommitter {\n  constructor(element, name, strings) {\n    this.dirty = true;\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      this.parts[i] = this._createPart();\n    }\n  }\n  /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n  _createPart() {\n    return new AttributePart(this);\n  }\n  _getValue() {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = '';\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = this.parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else\n        {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n    text += strings[l];\n    return text;\n  }\n  commit() {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue());\n    }\n  }}\n\n/**\n      * A Part that controls all or part of an attribute value.\n      */\nexport class AttributePart {\n  constructor(committer) {\n    this.value = undefined;\n    this.committer = committer;\n  }\n  setValue(value) {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }}\n\n/**\n      * A Part that controls a location within a Node tree. Like a Range, NodePart\n      * has start and end locations and can set and update the Nodes between those\n      * locations.\n      *\n      * NodeParts support several value types: primitives, Nodes, TemplateResults,\n      * as well as arrays and iterables of those types.\n      */\nexport class NodePart {\n  constructor(options) {\n    this.value = undefined;\n    this.__pendingValue = undefined;\n    this.options = options;\n  }\n  /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n  appendInto(container) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n  /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n  insertAfterNode(ref) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling;\n  }\n  /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n  appendIntoPart(part) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n  /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n  insertAfterPart(ref) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n  setValue(value) {\n    this.__pendingValue = value;\n  }\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else\n    if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else\n    if (value instanceof Node) {\n      this.__commitNode(value);\n    } else\n    if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else\n    if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else\n    {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n  __insert(node) {\n    this.endNode.parentNode.insertBefore(node, this.endNode);\n  }\n  __commitNode(value) {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n  __commitText(value) {\n    const node = this.startNode.nextSibling;\n    value = value == null ? '' : value;\n    // If `value` isn't already a string, we explicitly convert it here in case\n    // it can't be implicitly converted - i.e. it's a symbol.\n    const valueAsString = typeof value === 'string' ? value : String(value);\n    if (node === this.endNode.previousSibling &&\n    node.nodeType === 3 /* Node.TEXT_NODE */) {\n        // If we only have a single text node between the markers, we can just\n        // set its value, rather than replacing it.\n        // TODO(justinfagnani): Can we just check if this.value is primitive?\n        node.data = valueAsString;\n      } else\n    {\n      this.__commitNode(document.createTextNode(valueAsString));\n    }\n    this.value = value;\n  }\n  __commitTemplateResult(value) {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n    this.value.template === template) {\n      this.value.update(value.values);\n    } else\n    {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance = new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n  __commitIterable(value) {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value;\n    let partIndex = 0;\n    let itemPart;\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else\n        {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n  clear(startNode = this.startNode) {\n    removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n  }}\n\n/**\n      * Implements a boolean attribute, roughly as defined in the HTML\n      * specification.\n      *\n      * If the value is truthy, then the attribute is present with a value of\n      * ''. If the value is falsey, the attribute is removed.\n      */\nexport class BooleanAttributePart {\n  constructor(element, name, strings) {\n    this.value = undefined;\n    this.__pendingValue = undefined;\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error('Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n  setValue(value) {\n    this.__pendingValue = value;\n  }\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else\n      {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }}\n\n/**\n      * Sets attribute values for PropertyParts, so that the value is only set once\n      * even if there are multiple parts for a property.\n      *\n      * If an expression controls the whole property value, then the value is simply\n      * assigned to the property under control. If there are string literals or\n      * multiple expressions, then the strings are expressions are interpolated into\n      * a string first.\n      */\nexport class PropertyCommitter extends AttributeCommitter {\n  constructor(element, name, strings) {\n    super(element, name, strings);\n    this.single =\n    strings.length === 2 && strings[0] === '' && strings[1] === '';\n  }\n  _createPart() {\n    return new PropertyPart(this);\n  }\n  _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n  commit() {\n    if (this.dirty) {\n      this.dirty = false;\n      // tslint:disable-next-line:no-any\n      this.element[this.name] = this._getValue();\n    }\n  }}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n  const options = {\n    get capture() {\n      eventOptionsSupported = true;\n      return false;\n    } };\n\n  // tslint:disable-next-line:no-any\n  window.addEventListener('test', options, options);\n  // tslint:disable-next-line:no-any\n  window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n  constructor(element, eventName, eventContext) {\n    this.value = undefined;\n    this.__pendingValue = undefined;\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = e => this.handleEvent(e);\n  }\n  setValue(value) {\n    this.__pendingValue = value;\n  }\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n    oldListener != null && (\n    newListener.capture !== oldListener.capture ||\n    newListener.once !== oldListener.once ||\n    newListener.passive !== oldListener.passive);\n    const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange;\n  }\n  handleEvent(event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else\n    {\n      this.value.handleEvent(event);\n    }\n  }}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = o => o && (\neventOptionsSupported ?\n{ capture: o.capture, passive: o.passive, once: o.once } :\no.capture);","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from \"./parts.js\";\n/**\n                                                                                                                       * Creates Parts when a template is instantiated.\n                                                                                                                       */\nexport class DefaultTemplateProcessor {\n  /**\n                                        * Create parts for an attribute-position binding, given the event, attribute\n                                        * name, and string literals.\n                                        *\n                                        * @param element The element containing the binding\n                                        * @param name  The attribute name\n                                        * @param strings The string literals. There are always at least two strings,\n                                        *   event for fully-controlled bindings with a single expression.\n                                        */\n  handleAttributeExpressions(element, name, strings, options) {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n  handleTextExpression(options) {\n    return new NodePart(options);\n  }}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from \"./template.js\";\n/**\n                                                          * The default TemplateFactory which caches Templates keyed on\n                                                          * result.type and result.strings.\n                                                          */\nexport function templateFactory(result) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap(),\n      keyString: new Map() };\n\n    templateCaches.set(result.type, templateCache);\n  }\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\nexport const templateCaches = new Map();","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n     * @module lit-html\n     */\nimport { removeNodes } from \"./dom.js\";\nimport { NodePart } from \"./parts.js\";\nimport { templateFactory } from \"./template-factory.js\";\nexport const parts = new WeakMap();\n/**\n                                     * Renders a template result or other value to a container.\n                                     *\n                                     * To update a container with new values, reevaluate the template literal and\n                                     * call `render` with the new result.\n                                     *\n                                     * @param result Any value renderable by NodePart - typically a TemplateResult\n                                     *     created by evaluating a template tag like `html` or `svg`.\n                                     * @param container A DOM parent to render to. The entire contents are either\n                                     *     replaced, or efficiently updated if the same result type was previous\n                                     *     rendered there.\n                                     * @param options RenderOptions for the entire render tree rendered to this\n                                     *     container. Render options must *not* change between renders to the same\n                                     *     container, as those changes will not effect previously rendered DOM.\n                                     */\nexport const render = (result, container, options) => {\n  let part = parts.get(container);\n  if (part === undefined) {\n    removeNodes(container, container.firstChild);\n    parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n    part.appendInto(container);\n  }\n  part.setValue(result);\n  part.commit();\n};","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n     *\n     * Main lit-html module.\n     *\n     * Main exports:\n     *\n     * -  [[html]]\n     * -  [[svg]]\n     * -  [[render]]\n     *\n     * @module lit-html\n     * @preferred\n     */\n/**\n         * Do not remove this comment; it keeps typedoc from misplacing the module\n         * docs.\n         */\nimport { defaultTemplateProcessor } from \"./lib/default-template-processor.js\";\nimport { SVGTemplateResult, TemplateResult } from \"./lib/template-result.js\";\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from \"./lib/default-template-processor.js\";\nexport { directive, isDirective } from \"./lib/directive.js\";\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from \"./lib/dom.js\";\nexport { noChange, nothing } from \"./lib/part.js\";\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from \"./lib/parts.js\";\nexport { parts, render } from \"./lib/render.js\";\nexport { templateCaches, templateFactory } from \"./lib/template-factory.js\";\nexport { TemplateInstance } from \"./lib/template-instance.js\";\nexport { SVGTemplateResult, TemplateResult } from \"./lib/template-result.js\";\nexport { createMarker, isTemplatePartActive, Template } from \"./lib/template.js\";\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n                                                                                * Interprets a template literal as an HTML template that can efficiently\n                                                                                * render to and update a container.\n                                                                                */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n                                                                                                                    * Interprets a template literal as an SVG template that can efficiently\n                                                                                                                    * render to and update a container.\n                                                                                                                    */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);","// eslint-disable-next-line\nexport * from \"./unpkg.com/lit-html@1.1.2/lit-html\";","import {html, render} from \"./static-lib/lit-html.js\";\n\nconst _log = console.log.bind(console);\nfunction Log(item) {\n\t_log(...item.params);\n\treturn html`\n\t\t<style>\n\t\t\t.logItem {\n\t\t\t\t--border: 1px solid black;\n\t\t\t\tborder-top: var(--border);\n\t\t\t\tborder-bottom: var(--border);\n\t\t\t\tpadding: 0.25em;\n\t\t\t}\n\t\t\t.console-time {\n\t\t\t\tcolor: #888;\n\t\t\t\tfloat: right;\n\t\t\t}\n\t\t</style>\n\t\t<div class=\"logItem\"><span class=\"console-time\">${item.timestamp}</span>${item.params.join(\" \")}</div>\n\t`;\n}\nconst types = new Map([[\"log\", Log]]);\nfunction Console(logItems) {\n\treturn html`\n\t\t<style>\n\t\t\t.logging-interface {\n\t\t\t\tmax-height: 25vh;\n\t\t\t\theight: 200px;\n\t\t\t\tposition: fixed;\n\t\t\t\tleft: 0;\n\t\t\t\tright: 0;\n\t\t\t\tbottom: 0;\n\t\t\t\tbackground-color: #ddd;\n\t\t\t\tcolor: black;\n\t\t\t\toverflow-y: auto;\n\t\t\t\toverflow-x: hidden;\n\t\t\t}\n\t\t</style>\n\t\t<div class=\"logging-interface\">\n\t\t\t${logItems.map(item => types.get(item.type)(item))}\n\t\t</div>\n\t`;\n}\nfunction display(logItems) {\n\trender(Console(logItems), document.getElementById('logger-interface'));\n}\nconst logItems = [];\nwindow.consoleOut = (type = \"log\") => (...params) => {\n\tlogItems.push({\n\t\ttype,\n\t\tparams,\n\t\ttimestamp: new Date().toISOString()\n\t});\n\tdisplay(logItems);\n};\n\nwindow.console.log = consoleOut(\"log\");"]}